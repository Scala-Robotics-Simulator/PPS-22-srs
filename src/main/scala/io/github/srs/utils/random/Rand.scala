package io.github.srs.utils.random

/**
 * A domain-specific alias for a function that generates a random value of type `A` and returns it along with the next
 * state of the RNG.
 */
type Rand[+A] = RNG => (A, RNG)

/**
 * A companion object for the [[Rand]] type, providing utility methods for working with random values.
 */
object Rand:

  /**
   * Creates a [[Rand]] that always returns the same value 'a' along with the current [[RNG]] state.
   * @param a
   *   the value to be returned by the [[Rand]].
   * @tparam A
   *   the type of the value to be returned.
   * @return
   *   a [[Rand]] that returns 'a' and the current RNG state.
   */
  def unit[A](a: A): Rand[A] = rng => (a, rng)

  /**
   * Transforms a [[Rand]] of type `A` into a [[Rand]] of type `B` by applying the function 'f' to the value generated
   * by the original [[Rand]].
   * @param ra
   *   the original [[Rand]] that generates a value of type `A`.
   * @param f
   *   the function to transform the value of type `A` into a value of type `B`.
   * @tparam A
   *   the type of the value generated by the original [[Rand]].
   * @tparam B
   *   the type of the value generated by the transformed [[Rand]].
   * @return
   *   a new [[Rand]] that generates a value of type `B`.
   */
  def flatMap[A, B](ra: Rand[A])(f: A => Rand[B]): Rand[B] =
    rng =>
      val (a, r2) = ra(rng)
      f(a)(r2)

  /**
   * Transforms a [[Rand]] of type `A` into a [[Rand]] of type `B` by applying the function 'f' to the value generated
   * by the original [[Rand]].
   * @param ra
   *   the original [[Rand]] that generates a value of type `A`.
   * @param f
   *   the function to transform the value of type `A` into a value of type `B`.
   * @tparam A
   *   the type of the value generated by the original [[Rand]].
   * @tparam B
   *   the type of the value generated by the transformed [[Rand]].
   * @return
   *   a new [[Rand]] that generates a value of type `B`.
   */
  def map[A, B](ra: Rand[A])(f: A => B): Rand[B] =
    rng =>
      val (a, r2) = ra(rng)
      (f(a), r2)

  /**
   * Combines two [[Rand]]s of type `A` and `B` into a new [[Rand]] of type `C` by applying the function 'f' to the
   * values generated by both [[Rand]]s.
   * @param ra
   *   the first [[Rand]] that generates a value of type `A`.
   * @param rb
   *   the second [[Rand]] that generates a value of type `B`.
   * @param f
   *   the function to combine the values of type `A` and `B` into a value of type `C`.
   * @tparam A
   *   the type of the value generated by the first [[Rand]].
   * @tparam B
   *   the type of the value generated by the second [[Rand]].
   * @tparam C
   *   the type of the value generated by the combined [[Rand]].
   * @return
   *   a new [[Rand]] that generates a value of type `C`.
   */
  private def map2[A, B, C](ra: Rand[A], rb: Rand[B])(f: (A, B) => C): Rand[C] =
    rng =>
      val (a, rng2) = ra(rng)
      val (b, rng3) = rb(rng2)
      (f(a, b), rng3)

  /**
   * Combines a list of [[Rand]]s into a single [[Rand]] that generates a list of values.
   * @param fs
   *   the list of [[Rand]]s to be combined.
   * @tparam A
   *   the type of the values generated by the [[Rand]]s.
   * @return
   *   a new [[Rand]] that generates a list of values of type `A`.
   */
  private def sequence[A](fs: List[Rand[A]]): Rand[List[A]] =
    fs.foldRight(unit(Nil))((f, acc) => map2(f, acc)(_ :: _))

  /**
   * Creates a [[Rand]] that generates a list of 'n' random values of type `A` using the provided [[Rand]].
   * @param n
   *   the number of random values to generate.
   * @param ra
   *   the [[Rand]] that generates a single random value of type `A`.
   * @tparam A
   *   the type of the random values to be generated.
   * @return
   *   a new [[Rand]] that generates a list of 'n' random values of type `A`.
   */
  def listOfN[A](n: Int, ra: Rand[A]): Rand[List[A]] =
    sequence(List.fill(n)(ra))
end Rand

extension [A](ra: Rand[A])
  /**
   * Maps the value generated by the [[Rand]] to a new value of type `B` using the provided function `f`.
   * @param f
   *   the function to transform the value of type `A` into a value of type `B`.
   * @tparam B
   *   the type of the value to be generated by the transformed [[Rand]].
   * @return
   *   a new [[Rand]] that generates a value of type `B`.
   */
  def map[B](f: A => B): Rand[B] = Rand.map(ra)(f)

  /**
   * Flat-maps the value generated by the [[Rand]] to a new [[Rand]] of type `B` using the provided function `f`.
   * @param f
   *   the function to transform the value of type `A` into a new [[Rand]] of type `B`.
   * @tparam B
   *   the type of the value to be generated by the transformed [[Rand]].
   * @return
   *   a new [[Rand]] that generates a value of type `B`.
   */
  def flatMap[B](f: A => Rand[B]): Rand[B] = Rand.flatMap(ra)(f)
end extension
