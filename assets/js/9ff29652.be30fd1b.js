"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[254],{3611:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"development-process/dvcs","title":"DVCS","description":"Sono stati utilizzati Git e GitHub come sistema di controllo versione distribuito (DVCS) per gestire il codice sorgente","source":"@site/docs/01-development-process/05-dvcs.md","sourceDirName":"01-development-process","slug":"/development-process/dvcs","permalink":"/PPS-22-srs/docs/development-process/dvcs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Modalit\xe0 di revisione in itinere dei task","permalink":"/PPS-22-srs/docs/development-process/task-revision"},"next":{"title":"Build automation e Continuous Integration (CI)","permalink":"/PPS-22-srs/docs/development-process/ci"}}');var t=i(4848),s=i(8453);const r={},l="DVCS",c={},a=[{value:"Branching Model",id:"branching-model",level:2},{value:"Commit e Pull Request",id:"commit-e-pull-request",level:2},{value:"Definition of done",id:"definition-of-done",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dvcs",children:"DVCS"})}),"\n",(0,t.jsxs)(n.p,{children:["Sono stati utilizzati ",(0,t.jsx)(n.em,{children:"Git"})," e ",(0,t.jsx)(n.em,{children:"GitHub"})," come sistema di controllo versione distribuito (DVCS) per gestire il codice sorgente\ndel progetto. Il modello di branching adottato \xe8 ",(0,t.jsx)(n.strong,{children:"Trunk Based Development"}),", che prevede l'utilizzo di un branch\nprincipale (",(0,t.jsx)(n.code,{children:"main"}),") per lo sviluppo continuo e la creazione di branch secondari per funzionalit\xe0 specifiche."]}),"\n",(0,t.jsx)(n.h2,{id:"branching-model",children:"Branching Model"}),"\n",(0,t.jsx)(n.p,{children:"Il modello di branching adottato \xe8 stato il seguente:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"main"}),": branch principale, sempre in stato ",(0,t.jsx)(n.em,{children:"production-ready"}),". Tutte le modifiche vengono integrate nel branch\ndopo essere state testate e revisionate;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"feature/"}),": branch per lo sviluppo di nuove funzionalit\xe0. Ogni feature ha un proprio branch dedicato, creati da ",(0,t.jsx)(n.code,{children:"main"}),"\ne uniti su ",(0,t.jsx)(n.code,{children:"main"})," una volta completati e testati;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"hotfix/"}),": branch per risolvere bug critici in produzione. Creati da ",(0,t.jsx)(n.code,{children:"main"}),"; una volta risolto il problema, le\nmodifiche vengono integrate su ",(0,t.jsx)(n.code,{children:"main"})," e nei branch delle feature attive;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"doc"}),": branch dedicato alla documentazione del progetto; le modifiche alla documentazione vengono poi integrate su\n",(0,t.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"commit-e-pull-request",children:"Commit e Pull Request"}),"\n",(0,t.jsxs)(n.p,{children:["I commit e i titoli delle pull request seguono ",(0,t.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"Conventional Commits"}),".\nLe release sono state effettuate tramite ",(0,t.jsx)(n.a,{href:"https://github.com/features/actions",children:"GitHub Actions"}),", seguendo le convenzioni di versioning\nsemantico ",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"SemVer"}),".\nPer il controllo del testo dei commit \xe8 stato utilizzato un git hook ",(0,t.jsx)(n.code,{children:"commit-msg"}),", che ne verifica la conformit\xe0 alle\nconvenzioni. Per la verifica della correttezza del codice \xe8 stato invece utilizzato un hook ",(0,t.jsx)(n.code,{children:"pre-push"}),", che esegue\nautomaticamente i controlli di linting, formattazione e test.\nPer le pull request, il titolo \xe8 il contenuto \xe8 stato controllato con ",(0,t.jsx)(n.a,{href:"https://mergify.com/",children:"Mergify"}),", che ne verifica\nla conformit\xe0 alle convenzioni\ne richiede che siano state superate tutte le verifiche di Continuous Integration (CI) prima di poter essere unite a\n",(0,t.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"definition-of-done",children:"Definition of done"}),"\n",(0,t.jsx)(n.p,{children:"Per chiudere una pull request, \xe8 necessario che siano soddisfatte le seguenti condizioni:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"il codice \xe8 stato testato e verificato;"}),"\n",(0,t.jsx)(n.li,{children:"la pull request \xe8 stata revisionata da almeno due membri del team;"}),"\n",(0,t.jsxs)(n.li,{children:["il titolo della pull request segue i ",(0,t.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"Conventional Commits"}),";"]}),"\n",(0,t.jsx)(n.li,{children:"tutti i test passano con successo;"}),"\n",(0,t.jsxs)(n.li,{children:["non ci sono conflitti di merge con il branch ",(0,t.jsx)(n.code,{children:"main"}),";"]}),"\n",(0,t.jsx)(n.li,{children:"non ci sono conversazioni aperte nella pull request;"}),"\n",(0,t.jsx)(n.li,{children:"la documentazione \xe8 aggiornata, se necessario."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var o=i(6540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);