"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1896],{3381:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"implementation/david-cohen/simulation-gui","title":"SimulationView","description":"La SimulationView \xe8 l\'interfaccia grafica (GUI) della simulazione, implementata in Java Swing. Le sue","source":"@site/docs/05-implementation/03-david-cohen/simulation-gui.md","sourceDirName":"05-implementation/03-david-cohen","slug":"/implementation/david-cohen/simulation-gui","permalink":"/PPS-22-srs/docs/implementation/david-cohen/simulation-gui","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Behavior","permalink":"/PPS-22-srs/docs/implementation/david-cohen/behaviors"},"next":{"title":"Validation","permalink":"/PPS-22-srs/docs/implementation/david-cohen/domain-validation"}}');var l=n(4848),t=n(8453);const a={sidebar_position:4},s="SimulationView",r={},d=[{value:"Architettura e design pattern",id:"architettura-e-design-pattern",level:2},{value:"Componenti",id:"componenti",level:3},{value:"Stato centralizzato",id:"stato-centralizzato",level:3},{value:"Ciclo di vita e rendering",id:"ciclo-di-vita-e-rendering",level:2},{value:"Ottimizzazione del rendering",id:"ottimizzazione-del-rendering",level:3},{value:"Interazione e flusso degli eventi",id:"interazione-e-flusso-degli-eventi",level:2},{value:"Controlli di esecuzione",id:"controlli-di-esecuzione",level:3},{value:"Selezione del robot e visualizzazione dati",id:"selezione-del-robot-e-visualizzazione-dati",level:3},{value:"Dettagli grafici",id:"dettagli-grafici",level:3}];function c(e){const i={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.header,{children:(0,l.jsx)(i.h1,{id:"simulationview",children:"SimulationView"})}),"\n",(0,l.jsxs)(i.p,{children:["La ",(0,l.jsx)(i.code,{children:"SimulationView"})," \xe8 l'interfaccia grafica (GUI) della simulazione, implementata in ",(0,l.jsx)(i.strong,{children:"Java Swing"}),". Le sue\nresponsabilit\xe0 principali sono il ",(0,l.jsx)(i.strong,{children:"rendering"})," dello stato dell'ambiente, la gestione dell'",(0,l.jsx)(i.strong,{children:"interazione utente"}),"\ntramite controlli di esecuzione e la ",(0,l.jsx)(i.strong,{children:"visualizzazione di dati"})," specifici, come lo stato di un robot e il tempo di simulazione."]}),"\n",(0,l.jsxs)(i.p,{children:["L'implementazione di riferimento si trova in ",(0,l.jsx)(i.code,{children:"GUIComponent.scala"}),"."]}),"\n",(0,l.jsx)(i.h2,{id:"architettura-e-design-pattern",children:"Architettura e design pattern"}),"\n",(0,l.jsx)(i.h3,{id:"componenti",children:"Componenti"}),"\n",(0,l.jsx)(i.p,{children:"L'interfaccia \xe8 strutturata tramite la composizione di pannelli, ognuno dedicato a una funzione specifica."}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Layout Principale"}),": un ",(0,l.jsx)(i.code,{children:"JFrame"})," contiene un ",(0,l.jsx)(i.code,{children:"JSplitPane"})," che separa il ",(0,l.jsx)(i.code,{children:"SimulationCanvas"})," (a sinistra) dai\npannelli informativi e di controllo (a destra);"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Pannelli Funzionali"}),":","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"SimulationCanvas"}),": si occupa del rendering dell'ambiente;"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"RobotPanel"}),": mostra la lista dei robot, gestisce la selezione e la visualizzazione dei dati del robot selezionato;"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"TimePanel"}),": mostra il tempo di simulazione;"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"ControlsPanel"}),": raggruppa i controlli di interazione (start/stop, pausa, velocit\xe0)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"stato-centralizzato",children:"Stato centralizzato"}),"\n",(0,l.jsxs)(i.p,{children:["Per evitare l\u2019accoppiamento diretto tra i pannelli e garantire coerenza dei dati, la vista adotta un ",(0,l.jsx)(i.em,{children:"stato\ncentralizzato"}),".\nUn singolo oggetto ",(0,l.jsx)(i.code,{children:"SimulationViewState"}),", gestito in modo thread-safe tramite un ",(0,l.jsx)(i.code,{children:"AtomicReference"}),", contiene i dati\nnecessari alla UI."]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:"// Lo stato centralizzato contiene tutti i dati necessari per il rendering\nfinal case class SimulationViewState\n(\n  environment: Option[Environment] = None,\n  selectedRobotId: Option[String] = None,\n  robots: List[Robot] = Nil,\n  staticLayer: Option[BufferedImage] = None,\n  // ... altri campi per la gestione della cache\n)\n"})}),"\n",(0,l.jsxs)(i.blockquote,{children:["\n",(0,l.jsxs)(i.p,{children:["Nota: il flusso \xe8 ",(0,l.jsx)(i.em,{children:"unidirezionale"}),": il controller aggiorna lo stato via ",(0,l.jsx)(i.code,{children:"render"}),", i componenti leggono e si\naggiornano."]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"ciclo-di-vita-e-rendering",children:"Ciclo di vita e rendering"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"init(queue)"})}),": costruisce la UI, registra gli handler e mostra la finestra."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"render(state)"})}),": a ogni tick aggiorna ",(0,l.jsx)(i.code,{children:"SimulationViewState"})," e programma il ridisegno sull\u2019EDT."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"timeElapsed(state)"})}),": disabilita i controlli al termine della simulazione."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"close()"})}),": rilascia le risorse della finestra Swing."]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"ottimizzazione-del-rendering",children:"Ottimizzazione del rendering"}),"\n",(0,l.jsxs)(i.p,{children:["Per garantire fluidit\xe0, ",(0,l.jsx)(i.code,{children:"SimulationCanvas"})," usa una cache (",(0,l.jsx)(i.code,{children:"BufferedImage"}),"). Gli elementi ",(0,l.jsx)(i.em,{children:"statici"})," (griglia, ostacoli,\nluci) sono disegnati una sola volta; ad ogni tick si ridisegnano solo quelli ",(0,l.jsx)(i.em,{children:"dinamici"})," (robot e sensori). La cache si\nrigenera solo quando cambiano dimensioni del canvas o dell\u2019ambiente."]}),"\n",(0,l.jsx)(i.h2,{id:"interazione-e-flusso-degli-eventi",children:"Interazione e flusso degli eventi"}),"\n",(0,l.jsx)(i.h3,{id:"controlli-di-esecuzione",children:"Controlli di esecuzione"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Start/Stop"}),": invia ",(0,l.jsx)(i.code,{children:"Event.Resume"}),"/",(0,l.jsx)(i.code,{children:"Event.Stop"}),". Per prevenire interruzioni accidentali, ",(0,l.jsx)(i.em,{children:"Stop"})," prima mette in pausa\n(",(0,l.jsx)(i.code,{children:"Event.Pause"}),") e chiede conferma tramite un modale."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Pausa/Riprendi"}),": invia ",(0,l.jsx)(i.code,{children:"Event.Pause"})," o ",(0,l.jsx)(i.code,{children:"Event.Resume"}),"."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Velocit\xe0"}),": i radio button inviano ",(0,l.jsx)(i.code,{children:"Event.TickSpeed"})," con la velocit\xe0 selezionata."]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"selezione-del-robot-e-visualizzazione-dati",children:"Selezione del robot e visualizzazione dati"}),"\n",(0,l.jsxs)(i.p,{children:["Un robot pu\xf2 essere selezionato sia dalla lista nel ",(0,l.jsx)(i.code,{children:"RobotPanel"})," sia cliccando direttamente sulla sua rappresentazione\nnel ",(0,l.jsx)(i.code,{children:"SimulationCanvas"}),". Una volta selezionato, il ",(0,l.jsx)(i.code,{children:"RobotPanel"})," mostra le sue informazioni dettagliate, comprese le\nletture dei sensori in tempo reale, ottenute tramite la funzione ",(0,l.jsx)(i.code,{children:"robot.senseAll(environment)"}),"."]}),"\n",(0,l.jsx)(i.h3,{id:"dettagli-grafici",children:"Dettagli grafici"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Entit\xe0"}),": gradienti e ombre per migliorare leggibilit\xe0."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Selezione"}),": il robot selezionato \xe8 evidenziato con bordo e colore distintivi."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Sensori"}),": i raggi di prossimit\xe0 sono linee con lunghezza proporzionale alla distanza misurata."]}),"\n"]}),"\n",(0,l.jsx)(i.admonition,{type:"info",children:(0,l.jsxs)(i.p,{children:["Per un'overview delle funzionalit\xe0 offerte dall'interfaccia grafica, si rimanda alla sezione ",(0,l.jsx)(i.a,{href:"/PPS-22-srs/docs/user-guide/simulation",children:"Simulation GUI"})," della User Guide."]})})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>s});var o=n(6540);const l={},t=o.createContext(l);function a(e){const i=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),o.createElement(t.Provider,{value:i},e.children)}}}]);